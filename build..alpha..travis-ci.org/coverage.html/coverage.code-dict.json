{"/home/travis/build/npmtest/node-npmtest-yeoman-generator/test.js":"/* istanbul instrument in package npmtest_yeoman_generator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-yeoman-generator/lib.npmtest_yeoman_generator.js":"/* istanbul instrument in package npmtest_yeoman_generator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_yeoman_generator = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_yeoman_generator = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-yeoman-generator/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-yeoman-generator && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_yeoman_generator */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_yeoman_generator\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_yeoman_generator.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_yeoman_generator.rollup.js'] =\n            local.assetsDict['/assets.npmtest_yeoman_generator.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_yeoman_generator.__dirname +\n                    '/lib.npmtest_yeoman_generator.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-yeoman-generator/node_modules/yeoman-generator/lib/index.js":"'use strict';\nvar util = require('util');\nvar path = require('path');\nvar events = require('events');\nvar assert = require('assert');\nvar _ = require('lodash');\nvar findUp = require('find-up');\nvar readPkgUp = require('read-pkg-up');\nvar chalk = require('chalk');\nvar mkdirp = require('mkdirp');\nvar minimist = require('minimist');\nvar runAsync = require('run-async');\nvar through = require('through2');\nvar userHome = require('user-home');\nvar FileEditor = require('mem-fs-editor');\nvar pathIsAbsolute = require('path-is-absolute');\nvar pathExists = require('path-exists');\nvar debug = require('debug')('yeoman:generator');\nvar Conflicter = require('./util/conflicter');\nvar Storage = require('./util/storage');\nvar promptSuggestion = require('./util/prompt-suggestion');\n\nvar EMPTY = '@@_YEOMAN_EMPTY_MARKER_@@';\n\n/**\n * The `Base` class provides the common API shared by all generators.\n * It define options, arguments, file, prompt, log, API, etc.\n *\n * It mixes into its prototype all the methods found in the `actions/` mixins.\n *\n * Every generator should extend this base class.\n *\n * @constructor\n * @mixes actions/install\n * @mixes actions/spawn-command\n * @mixes actions/user\n * @mixes actions/help\n * @mixes nodejs/EventEmitter\n *\n * @param {String|Array} args\n * @param {Object} options\n *\n * @property {Object}   env         - the current Environment being run\n * @property {Object}   args        - Provide arguments at initialization\n * @property {String}   resolved    - the path to the current generator\n * @property {String}   description - Used in `--help` output\n * @property {String}   appname     - The application name\n * @property {Storage}  config      - `.yo-rc` config file manager\n * @property {Object}   fs          - An instance of {@link https://github.com/SBoudrias/mem-fs-editor Mem-fs-editor}\n * @property {Function} log         - Output content through Interface Adapter\n *\n * @example\n * const Generator = require('yeoman-generator');\n * module.exports = class extends Generator {\n *   writing() {\n *     this.fs.write(this.destinationPath('index.js'), 'const foo = 1;');\n *   }\n * };\n */\n\nvar Base = module.exports = function (args, options) {\n  events.EventEmitter.call(this);\n\n  if (!Array.isArray(args)) {\n    options = args;\n    args = [];\n  }\n\n  this.options = options || {};\n  this._initOptions = _.clone(options);\n  this._args = args || [];\n  this._options = {};\n  this._arguments = [];\n  this._composedWith = [];\n  this._transformStreams = [];\n\n  this.option('help', {\n    type: Boolean,\n    alias: 'h',\n    description: 'Print the generator\\'s options and usage'\n  });\n\n  this.option('skip-cache', {\n    type: Boolean,\n    description: 'Do not remember prompt answers',\n    default: false\n  });\n\n  this.option('skip-install', {\n    type: Boolean,\n    description: 'Do not automatically install dependencies',\n    default: false\n  });\n\n  // Checks required paramaters\n  assert(this.options.env, 'You must provide the environment object. Use env#create() to create a new generator.');\n  assert(this.options.resolved, 'You must provide the resolved path value. Use env#create() to create a new generator.');\n  this.env = this.options.env;\n  this.resolved = this.options.resolved;\n\n  // Ensure the environment support features this yeoman-generator version require.\n  require('yeoman-environment').enforceUpdate(this.env);\n\n  this.description = this.description || '';\n\n  this.async = function () {\n    return function () {};\n  };\n\n  this.fs = FileEditor.create(this.env.sharedFs);\n  this.conflicter = new Conflicter(this.env.adapter, this.options.force);\n\n  // Mirror the adapter log method on the generator.\n  //\n  // example:\n  // this.log('foo');\n  // this.log.error('bar');\n  this.log = this.env.adapter.log;\n\n  // Determine the app root\n  this.contextRoot = this.env.cwd;\n\n  var rootPath = findUp.sync('.yo-rc.json', {\n    cwd: this.env.cwd\n  });\n  rootPath = rootPath ? path.dirname(rootPath) : this.env.cwd;\n\n  if (rootPath !== this.env.cwd) {\n    this.log([\n      '',\n      'Just found a `.yo-rc.json` in a parent directory.',\n      'Setting the project root at: ' + rootPath\n    ].join('\\n'));\n    this.destinationRoot(rootPath);\n  }\n\n  this.appname = this.determineAppname();\n  this.config = this._getStorage();\n  this._globalConfig = this._getGlobalStorage();\n\n  // Ensure source/destination path, can be configured from subclasses\n  this.sourceRoot(path.join(path.dirname(this.resolved), 'templates'));\n};\n\nutil.inherits(Base, events.EventEmitter);\n\n// Mixin the actions modules\n_.extend(Base.prototype, require('./actions/install'));\n_.extend(Base.prototype, require('./actions/help'));\n_.extend(Base.prototype, require('./actions/spawn-command'));\nBase.prototype.user = require('./actions/user');\n\n/*\n * Prompt user to answer questions. The signature of this method is the same as {@link https://github.com/SBoudrias/Inquirer.js Inquirer.js}\n *\n * On top of the Inquirer.js API, you can provide a `{cache: true}` property for\n * every question descriptor. When set to true, Yeoman will store/fetch the\n * user's answers as defaults.\n *\n * @param  {array} questions  Array of question descriptor objects. See {@link https://github.com/SBoudrias/Inquirer.js/blob/master/README.md Documentation}\n * @return {Promise}\n */\n\nBase.prototype.prompt = function (questions) {\n  questions = promptSuggestion.prefillQuestions(this._globalConfig, questions);\n  questions = promptSuggestion.prefillQuestions(this.config, questions);\n\n  return this.env.adapter.prompt(questions).then(function (answers) {\n    if (!this.options['skip-cache']) {\n      promptSuggestion.storeAnswers(this._globalConfig, questions, answers, false);\n      promptSuggestion.storeAnswers(this.config, questions, answers, true);\n    }\n\n    return answers;\n  }.bind(this));\n};\n\n/**\n * Adds an option to the set of generator expected options, only used to\n * generate generator usage. By default, generators get all the cli options\n * parsed by nopt as a `this.options` hash object.\n *\n * ### Options:\n *\n *   - `description` Description for the option\n *   - `type` Either Boolean, String or Number\n *   - `alias` Option name alias (example `-h` and --help`)\n *   - `default` Default value\n *   - `hide` Boolean whether to hide from help\n *\n * @param {String} name\n * @param {Object} config\n */\n\nBase.prototype.option = function (name, config) {\n  config = config || {};\n\n  // Alias default to defaults for backward compatibility.\n  if ('defaults' in config) {\n    config.default = config.defaults;\n  }\n  config.description = config.description || config.desc;\n\n  _.defaults(config, {\n    name: name,\n    description: 'Description for ' + name,\n    type: Boolean,\n    hide: false\n  });\n\n  // Check whether boolean option is invalid (starts with no-)\n  var boolOptionRegex = /^no-/;\n  if (config.type === Boolean && name.match(boolOptionRegex)) {\n    let simpleName = name.replace(boolOptionRegex, '');\n    return this.emit('error', new Error([\n      `Option name ${chalk.yellow(name)} cannot start with ${chalk.red('no-')}\\n`,\n      `Option name prefixed by ${chalk.yellow('--no')} are parsed as implicit`,\n      ` boolean. To use ${chalk.yellow('--' + name)} as an option, use\\n`,\n      chalk.cyan(`  this.option('${simpleName}', {type: Boolean})`)\n    ].join('')));\n  }\n\n  if (this._options[name] === null || this._options[name] === undefined) {\n    this._options[name] = config;\n  }\n\n  this.parseOptions();\n  return this;\n};\n\n/**\n * Adds an argument to the class and creates an attribute getter for it.\n *\n * Arguments are different from options in several aspects. The first one\n * is how they are parsed from the command line, arguments are retrieved\n * based on their position.\n *\n * Besides, arguments are used inside your code as a property (`this.argument`),\n * while options are all kept in a hash (`this.options`).\n *\n * ### Options:\n *\n *   - `description` Description for the argument\n *   - `required` Boolean whether it is required\n *   - `optional` Boolean whether it is optional\n *   - `type` String, Number, Array, or Object\n *   - `default` Default value for this argument\n *\n * @param {String} name\n * @param {Object} config\n */\n\nBase.prototype.argument = function (name, config) {\n  config = config || {};\n\n  // Alias default to defaults for backward compatibility.\n  if ('defaults' in config) {\n    config.default = config.defaults;\n  }\n  config.description = config.description || config.desc;\n\n  _.defaults(config, {\n    name: name,\n    required: config.default === null || config.default === undefined,\n    type: String\n  });\n\n  this._arguments.push(config);\n\n  this.parseOptions();\n  return this;\n};\n\nBase.prototype.parseOptions = function () {\n  var minimistDef = {\n    string: [],\n    boolean: [],\n    alias: {},\n    default: {}\n  };\n\n  _.each(this._options, function (option) {\n    if (option.type === Boolean) {\n      minimistDef.boolean.push(option.name);\n      if (!('default' in option) && !option.required) {\n        minimistDef.default[option.name] = EMPTY;\n      }\n    } else {\n      minimistDef.string.push(option.name);\n    }\n\n    if (option.alias) {\n      minimistDef.alias[option.alias] = option.name;\n    }\n\n    // Only apply default values if we don't already have a value injected from\n    // the runner\n    if (option.name in this._initOptions) {\n      minimistDef.default[option.name] = this._initOptions[option.name];\n    } else if (option.alias && option.alias in this._initOptions) {\n      minimistDef.default[option.name] = this._initOptions[option.alias];\n    } else if ('default' in option) {\n      minimistDef.default[option.name] = option.default;\n    }\n  }.bind(this));\n\n  var parsedOpts = minimist(this._args, minimistDef);\n\n  // Parse options to the desired type\n  _.each(parsedOpts, function (option, name) {\n    // Manually set value as undefined if it should be.\n    if (option === EMPTY) {\n      parsedOpts[name] = undefined;\n      return;\n    }\n    if (this._options[name] && option !== undefined) {\n      parsedOpts[name] = this._options[name].type(option);\n    }\n  }.bind(this));\n\n  // Parse positional arguments to valid options\n  this._arguments.forEach(function (config, index) {\n    var value;\n    if (index >= parsedOpts._.length) {\n      if (config.name in this._initOptions) {\n        value = this._initOptions[config.name];\n      } else if ('default' in config) {\n        value = config.default;\n      } else {\n        return;\n      }\n    } else if (config.type === Array) {\n      value = parsedOpts._.slice(index, parsedOpts._.length);\n    } else {\n      value = config.type(parsedOpts._[index]);\n    }\n\n    parsedOpts[config.name] = value;\n  }.bind(this));\n\n  // Make the parsed options available to the instance\n  _.extend(this.options, parsedOpts);\n  this.args = this.arguments = parsedOpts._;\n\n  // Make sure required args are all present\n  this.checkRequiredArgs();\n};\n\nBase.prototype.checkRequiredArgs = function () {\n  // If the help option was provided, we don't want to check for required\n  // arguments, since we're only going to print the help message anyway.\n  if (this.options.help) {\n    return;\n  }\n\n  // Bail early if it's not possible to have a missing required arg\n  if (this.args.length > this._arguments.length) {\n    return;\n  }\n\n  this._arguments.forEach(function (config, position) {\n    // If the help option was not provided, check whether the argument was\n    // required, and whether a value was provided.\n    if (config.required && position >= this.args.length) {\n      return this.emit('error', new Error('Did not provide required argument ' + chalk.bold(config.name) + '!'));\n    }\n  }, this);\n};\n\n/**\n * Runs the generator, scheduling prototype methods on a run queue. Method names\n * will determine the order each method is run. Methods without special names\n * will run in the default queue.\n *\n * Any method named `constructor` and any methods prefixed by a `_` won't be scheduled.\n *\n * You can also supply the arguments for the method to be invoked. If none are\n * provided, the same values used to initialize the invoker are used to\n * initialize the invoked.\n *\n * @param {Function} [cb]\n */\n\nBase.prototype.run = function (cb) {\n  cb = cb || function () {};\n\n  var self = this;\n  this._running = true;\n  this.emit('run');\n\n  var methods = Object.getOwnPropertyNames(Object.getPrototypeOf(this));\n  var validMethods = methods.filter(methodIsValid);\n  assert(validMethods.length, 'This Generator is empty. Add at least one method for it to run.');\n\n  this.env.runLoop.once('end', function () {\n    this.emit('end');\n    cb();\n  }.bind(this));\n\n  // Ensure a prototype method is a candidate run by default\n  function methodIsValid(name) {\n    return name.charAt(0) !== '_' && name !== 'constructor';\n  }\n\n  function addMethod(method, methodName, queueName) {\n    queueName = queueName || 'default';\n    debug('Queueing ' + methodName + ' in ' + queueName);\n    self.env.runLoop.add(queueName, function (completed) {\n      debug('Running ' + methodName);\n      self.emit('method:' + methodName);\n\n      runAsync(function () {\n        self.async = function () {\n          return this.async();\n        }.bind(this);\n\n        return method.apply(self, self.args);\n      })().then(completed).catch(function (err) {\n        debug('An error occured while running ' + methodName, err);\n\n        // Ensure we emit the error event outside the promise context so it won't be\n        // swallowed when there's no listeners.\n        setImmediate(function () {\n          self.emit('error', err);\n          cb(err);\n        });\n      });\n    });\n  }\n\n  function addInQueue(name) {\n    var item = Object.getPrototypeOf(self)[name];\n    var queueName = self.env.runLoop.queueNames.indexOf(name) === -1 ? null : name;\n\n    // Name points to a function; run it!\n    if (_.isFunction(item)) {\n      return addMethod(item, name, queueName);\n    }\n\n    // Not a queue hash; stop\n    if (!queueName) {\n      return;\n    }\n\n    // Run each queue items\n    _.each(item, function (method, methodName) {\n      if (!_.isFunction(method) || !methodIsValid(methodName)) {\n        return;\n      }\n\n      addMethod(method, methodName, queueName);\n    });\n  }\n\n  validMethods.forEach(addInQueue);\n\n  var writeFiles = function () {\n    this.env.runLoop.add('conflicts', this._writeFiles.bind(this), {\n      once: 'write memory fs to disk'\n    });\n  }.bind(this);\n\n  this.env.sharedFs.on('change', writeFiles);\n  writeFiles();\n\n  // Add the default conflicts handling\n  this.env.runLoop.add('conflicts', function (done) {\n    this.conflicter.resolve(function (err) {\n      if (err) {\n        this.emit('error', err);\n      }\n\n      done();\n    }.bind(this));\n  }.bind(this));\n\n  _.invokeMap(this._composedWith, 'run');\n  return this;\n};\n\n/**\n * Compose this generator with another one.\n * @param  {String} namespace  The generator namespace to compose with\n * @param  {Object} options    The options passed to the Generator\n * @param  {Object} [settings] Settings hash on the composition relation\n * @param  {string} [settings.local]        Path to a locally stored generator\n * @param  {String} [settings.link=\"weak\"]  If \"strong\", the composition will occured\n *                                          even when the composition is initialized by\n *                                          the end user\n * @return {this}\n *\n * @example <caption>Using a peerDependency generator</caption>\n * this.composeWith('bootstrap', { sass: true });\n *\n * @example <caption>Using a direct dependency generator</caption>\n * this.composeWith(require.resolve('generator-bootstrap/app/main.js'), { sass: true });\n */\n\nBase.prototype.composeWith = function (modulePath, options) {\n  var generator;\n  options = options || {};\n\n  // Pass down the default options so they're correclty mirrored down the chain.\n  options = _.extend({\n    skipInstall: this.options.skipInstall,\n    'skip-install': this.options.skipInstall,\n    skipCache: this.options.skipCache,\n    'skip-cache': this.options.skipCache\n  }, options);\n\n  try {\n    var Generator = require(modulePath); // eslint-disable-line import/no-dynamic-require\n    Generator.resolved = require.resolve(modulePath);\n    Generator.namespace = this.env.namespace(modulePath);\n    generator = this.env.instantiate(Generator, {\n      options: options,\n      arguments: options.arguments\n    });\n  } catch (err) {\n    if (err.code === 'MODULE_NOT_FOUND') {\n      generator = this.env.create(modulePath, {\n        options: options,\n        arguments: options.arguments\n      });\n    } else {\n      throw err;\n    }\n  }\n\n  if (this._running) {\n    generator.run();\n  } else {\n    this._composedWith.push(generator);\n  }\n\n  return this;\n};\n\n/**\n * Determine the root generator name (the one who's extending Base).\n * @return {String} The name of the root generator\n */\n\nBase.prototype.rootGeneratorName = function () {\n  var pkg = readPkgUp.sync({cwd: this.resolved}).pkg;\n  return pkg ? pkg.name : '*';\n};\n\n/**\n * Determine the root generator version (the one who's extending Base).\n * @return {String} The version of the root generator\n */\n\nBase.prototype.rootGeneratorVersion = function () {\n  var pkg = readPkgUp.sync({cwd: this.resolved}).pkg;\n  return pkg ? pkg.version : '0.0.0';\n};\n\n/**\n * Return a storage instance.\n * @return {Storage} Generator storage\n * @private\n */\n\nBase.prototype._getStorage = function () {\n  var storePath = path.join(this.destinationRoot(), '.yo-rc.json');\n  return new Storage(this.rootGeneratorName(), this.fs, storePath);\n};\n\n/**\n * Setup a globalConfig storage instance.\n * @return {Storage} Global config storage\n * @private\n */\n\nBase.prototype._getGlobalStorage = function () {\n  var storePath = path.join(userHome, '.yo-rc-global.json');\n  var storeName = util.format('%s:%s', this.rootGeneratorName(), this.rootGeneratorVersion());\n  return new Storage(storeName, this.fs, storePath);\n};\n\n/**\n * Change the generator destination root directory.\n * This path is used to find storage, when using a file system helper method (like\n * `this.write` and `this.copy`)\n * @param  {String} rootPath new destination root path\n * @return {String}          destination root path\n */\n\nBase.prototype.destinationRoot = function (rootPath) {\n  if (_.isString(rootPath)) {\n    this._destinationRoot = path.resolve(rootPath);\n\n    if (!pathExists.sync(rootPath)) {\n      mkdirp.sync(rootPath);\n    }\n\n    process.chdir(rootPath);\n    this.env.cwd = rootPath;\n\n    // Reset the storage\n    this.config = this._getStorage();\n  }\n\n  return this._destinationRoot || this.env.cwd;\n};\n\n/**\n * Change the generator source root directory.\n * This path is used by multiples file system methods like (`this.read` and `this.copy`)\n * @param  {String} rootPath new source root path\n * @return {String}          source root path\n */\n\nBase.prototype.sourceRoot = function (rootPath) {\n  if (_.isString(rootPath)) {\n    this._sourceRoot = path.resolve(rootPath);\n  }\n\n  return this._sourceRoot;\n};\n\n/**\n * Join a path to the source root.\n * @param  {...String} path\n * @return {String}    joined path\n */\n\nBase.prototype.templatePath = function () {\n  var filepath = path.join.apply(path, arguments);\n\n  if (!pathIsAbsolute(filepath)) {\n    filepath = path.join(this.sourceRoot(), filepath);\n  }\n\n  return filepath;\n};\n\n/**\n * Join a path to the destination root.\n * @param  {...String} path\n * @return {String}    joined path\n */\n\nBase.prototype.destinationPath = function () {\n  var filepath = path.join.apply(path, arguments);\n\n  if (!pathIsAbsolute(filepath)) {\n    filepath = path.join(this.destinationRoot(), filepath);\n  }\n\n  return filepath;\n};\n\n/**\n * Determines the name of the application.\n *\n * First checks for name in bower.json.\n * Then checks for name in package.json.\n * Finally defaults to the name of the current directory.\n * @return {String} The name of the application\n */\nBase.prototype.determineAppname = function () {\n  var appname = this.fs.readJSON(this.destinationPath('bower.json'), {}).name;\n\n  if (!appname) {\n    appname = this.fs.readJSON(this.destinationPath('package.json'), {}).name;\n  }\n\n  if (!appname) {\n    appname = path.basename(this.destinationRoot());\n  }\n\n  return appname.replace(/[^\\w\\s]+?/g, ' ');\n};\n\n/**\n * Add a transform stream to the commit stream.\n *\n * Most usually, these transform stream will be Gulp plugins.\n *\n * @param  {stream.Transform|stream.Transform[]} stream An array of Transform stream\n * or a single one.\n * @return {this}\n */\nBase.prototype.registerTransformStream = function (streams) {\n  assert(streams, 'expected to receive a transform stream as parameter');\n  if (!_.isArray(streams)) {\n    streams = [streams];\n  }\n  this._transformStreams = this._transformStreams.concat(streams);\n  return this;\n};\n\n/**\n * Write memory fs file to disk and logging results\n * @param {Function} done - callback once files are written\n */\nBase.prototype._writeFiles = function (done) {\n  var self = this;\n\n  var conflictChecker = through.obj(function (file, enc, cb) {\n    var stream = this;\n\n    // If the file has no state requiring action, move on\n    if (file.state === null) {\n      return cb();\n    }\n\n    // Config file should not be processed by the conflicter. Just pass through\n    var filename = path.basename(file.path);\n\n    if (filename === '.yo-rc.json' || filename === '.yo-rc-global.json') {\n      this.push(file);\n      return cb();\n    }\n\n    self.conflicter.checkForCollision(file.path, file.contents, function (err, status) {\n      if (err) {\n        cb(err);\n        return;\n      }\n\n      if (status === 'skip') {\n        delete file.state;\n      } else {\n        stream.push(file);\n      }\n\n      cb();\n    });\n    self.conflicter.resolve();\n  });\n\n  var transformStreams = this._transformStreams.concat([conflictChecker]);\n  this.fs.commit(transformStreams, function () {\n    done();\n  });\n};\n\n/**\n * Extend the Generator class to create a new one inherithing the base one. This\n * method is useful if your environment do not suport the ES6 classes.\n * @param  {Object} protoProps  Prototype properties (available on the instances)\n * @param  {Object} staticProps Static properties (available on the contructor)\n * @return {Object}             New sub class\n * @example\n * var Generator = require('yeoman-generator');\n * module.exports = Generator.extend({\n *   writing: function () {}\n *   // ...\n * });\n */\nBase.extend = require('class-extend').extend;\n","/home/travis/build/npmtest/node-npmtest-yeoman-generator/node_modules/yeoman-generator/lib/util/conflicter.js":"'use strict';\nvar fs = require('fs');\nvar path = require('path');\nvar async = require('async');\nvar detectConflict = require('detect-conflict');\nvar _ = require('lodash');\nvar pathExists = require('path-exists');\nvar typedError = require('error/typed');\nvar binaryDiff = require('./binary-diff');\n\nvar AbortedError = typedError({\n  type: 'AbortedError',\n  message: 'Process aborted by user'\n});\n\n/**\n * The Conflicter is a module that can be used to detect conflict between files. Each\n * Generator file system helpers pass files through this module to make sure they don't\n * break a user file.\n *\n * When a potential conflict is detected, we prompt the user and ask them for\n * confirmation before proceeding with the actual write.\n *\n * @constructor\n * @property {Boolean} force - same as the constructor argument\n *\n * @param  {TerminalAdapter} adapter - The generator adapter\n * @param  {Boolean} force - When set to true, we won't check for conflict. (the\n *                           conflicter become a passthrough)\n */\nvar Conflicter = module.exports = function (adapter, force) {\n  this.force = force === true;\n  this.adapter = adapter;\n  this.conflicts = [];\n};\n\n/**\n * Add a file to conflicter queue.\n *\n * @param {String} filepath - File destination path\n * @param {String} contents - File new contents\n * @param {Function} callback - callback to be called once we know if the user want to\n *                              proceed or not.\n */\nConflicter.prototype.checkForCollision = function (filepath, contents, callback) {\n  this.conflicts.push({\n    file: {\n      path: path.resolve(filepath),\n      contents: contents\n    },\n    callback: callback\n  });\n};\n\n/**\n * Process the _potential conflict_ queue and ask the user to resolve conflict when they\n * occur.\n *\n * The user is presented with the following options:\n *\n *   - `Y` Yes, overwrite\n *   - `n` No, do not overwrite\n *   - `a` All, overwrite this and all others\n *   - `q` Quit, abort\n *   - `d` Diff, show the differences between the old and the new\n *   - `h` Help, show this help\n *\n * @param  {Function} cb Callback once every conflict are resolved. (note that each\n *                       file can specify it's own callback. See `#checkForCollision()`)\n */\nConflicter.prototype.resolve = function (cb) {\n  cb = cb || _.noop;\n\n  var self = this;\n  var resolveConflicts = function (conflict) {\n    return function (next) {\n      if (!conflict) {\n        next();\n        return;\n      }\n\n      self.collision(conflict.file, function (status) {\n        // Remove the resolved conflict from the queue\n        _.pull(self.conflicts, conflict);\n        conflict.callback(null, status);\n        next();\n      });\n    };\n  };\n\n  async.series(this.conflicts.map(resolveConflicts), cb.bind(this));\n};\n\n/**\n * Check if a file conflict with the current version on the user disk.\n *\n * A basic check is done to see if the file exists, if it does:\n *\n *   1. Read its content from  `fs`\n *   2. Compare it with the provided content\n *   3. If identical, mark it as is and skip the check\n *   4. If diverged, prepare and show up the file collision menu\n *\n * @param  {Object}   file File object respecting this interface: { path, contents }\n * @param  {Function} cb Callback receiving a status string ('identical', 'create',\n *                       'skip', 'force')\n * @return {null} nothing\n */\nConflicter.prototype.collision = function (file, cb) {\n  var rfilepath = path.relative(process.cwd(), file.path);\n\n  if (!pathExists.sync(file.path)) {\n    this.adapter.log.create(rfilepath);\n    cb('create');\n    return;\n  }\n\n  if (this.force) {\n    this.adapter.log.force(rfilepath);\n    cb('force');\n    return;\n  }\n\n  if (detectConflict(file.path, file.contents)) {\n    this.adapter.log.conflict(rfilepath);\n    this._ask(file, cb);\n  } else {\n    this.adapter.log.identical(rfilepath);\n    cb('identical');\n  }\n};\n\n/**\n * Actual prompting logic\n * @private\n * @param {Object} file\n * @param {Function} cb\n */\nConflicter.prototype._ask = function (file, cb) {\n  var rfilepath = path.relative(process.cwd(), file.path);\n  var prompt = {\n    name: 'action',\n    type: 'expand',\n    message: 'Overwrite ' + rfilepath + '?',\n    choices: [{\n      key: 'y',\n      name: 'overwrite',\n      value: 'write'\n    }, {\n      key: 'n',\n      name: 'do not overwrite',\n      value: 'skip'\n    }, {\n      key: 'a',\n      name: 'overwrite this and all others',\n      value: 'force'\n    }, {\n      key: 'x',\n      name: 'abort',\n      value: 'abort'\n    }]\n  };\n\n  // Only offer diff option for files\n  if (fs.statSync(file.path).isFile()) {\n    prompt.choices.push({\n      key: 'd',\n      name: 'show the differences between the old and the new',\n      value: 'diff'\n    });\n  }\n\n  this.adapter.prompt([prompt], function (result) {\n    if (result.action === 'abort') {\n      this.adapter.log.writeln('Aborting ...');\n      throw new AbortedError();\n    }\n\n    if (result.action === 'diff') {\n      if (binaryDiff.isBinary(file.path, file.contents)) {\n        this.adapter.log.writeln(binaryDiff.diff(file.path, file.contents));\n      } else {\n        var existing = fs.readFileSync(file.path);\n        this.adapter.diff(existing.toString(), (file.contents || '').toString());\n      }\n\n      return this._ask(file, cb);\n    }\n\n    if (result.action === 'force') {\n      this.force = true;\n    }\n\n    if (result.action === 'write') {\n      result.action = 'force';\n    }\n\n    this.adapter.log[result.action](rfilepath);\n    return cb(result.action);\n  }.bind(this));\n};\n","/home/travis/build/npmtest/node-npmtest-yeoman-generator/node_modules/yeoman-generator/lib/util/binary-diff.js":"'use strict';\nvar fs = require('fs');\nvar readChunk = require('read-chunk');\nvar istextorbinary = require('istextorbinary');\nvar dateFormat = require('dateformat');\nvar prettyBytes = require('pretty-bytes');\nvar Table = require('cli-table');\n\nmodule.exports = {\n  isBinary: function (existingFilePath, newFileContents) {\n    var existingHeader = readChunk.sync(existingFilePath, 0, 512);\n    return istextorbinary.isBinarySync(undefined, existingHeader) || istextorbinary.isBinarySync(undefined, newFileContents);\n  },\n\n  diff: function (existingFilePath, newFileContents) {\n    var existingStat = fs.statSync(existingFilePath);\n    var table = new Table({\n      head: ['', 'Existing', 'Replacement', 'Diff']\n    });\n\n    var sizeDiff;\n\n    if (existingStat.size > newFileContents.length) {\n      sizeDiff = '-';\n    } else {\n      sizeDiff = '+';\n    }\n\n    sizeDiff += prettyBytes(Math.abs(existingStat.size - newFileContents.length));\n\n    table.push([\n      'Size',\n      prettyBytes(existingStat.size),\n      prettyBytes(newFileContents.length),\n      sizeDiff\n    ], [\n      'Last modified',\n      dateFormat(existingStat.mtime),\n      '',\n      ''\n    ]);\n\n    return table.toString();\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-yeoman-generator/node_modules/yeoman-generator/lib/util/storage.js":"'use strict';\nvar assert = require('assert');\nvar _ = require('lodash');\n\n/**\n * Storage instances handle a json file where Generator authors can store data.\n *\n * `Base` instantiate the storage as `config` by default.\n *\n * @constructor\n * @param {String} name       The name of the new storage (this is a namespace)\n * @param {mem-fs-editor} fs  A mem-fs editor instance\n * @param {String} configPath The filepath used as a storage.\n *\n * @example\n * var MyGenerator = yeoman.base.extend({\n *   config: function() {\n *     this.config.set('coffeescript', false);\n *   }\n * });\n */\n\nvar Storage = module.exports = function (name, fs, configPath) {\n  assert(name, 'A name parameter is required to create a storage');\n  assert(configPath, 'A config filepath is required to create a storage');\n\n  this.path = configPath;\n  this.name = name;\n  this.fs = fs;\n  this.existed = Object.keys(this._store()).length > 0;\n};\n\n/**\n * Return the current store as JSON object\n * @private\n * @return {Object} the store content\n */\nStorage.prototype._store = function () {\n  return this.fs.readJSON(this.path, {})[this.name] || {};\n};\n\n/**\n * Persist a configuration to disk\n * @param {Object} val - current configuration values\n */\nStorage.prototype._persist = function (val) {\n  var fullStore = this.fs.readJSON(this.path, {});\n  fullStore[this.name] = val;\n  this.fs.write(this.path, JSON.stringify(fullStore, null, '  '));\n};\n\n/**\n * Save a new object of values\n * @return {null}\n */\n\nStorage.prototype.save = function () {\n  this._persist(this._store());\n};\n\n/**\n * Get a stored value\n * @param  {String} key  The key under which the value is stored.\n * @return {*}           The stored value. Any JSON valid type could be returned\n */\n\nStorage.prototype.get = function (key) {\n  return this._store()[key];\n};\n\n/**\n * Get all the stored values\n * @return {Object}  key-value object\n */\n\nStorage.prototype.getAll = function () {\n  return _.cloneDeep(this._store());\n};\n\n/**\n * Assign a key to a value and schedule a save.\n * @param {String} key  The key under which the value is stored\n * @param {*} val  Any valid JSON type value (String, Number, Array, Object).\n * @return {*} val  Whatever was passed in as val.\n */\n\nStorage.prototype.set = function (key, val) {\n  assert(!_.isFunction(val), 'Storage value can\\'t be a function');\n\n  var store = this._store();\n\n  if (_.isObject(key)) {\n    val = _.extend(store, key);\n  } else {\n    store[key] = val;\n  }\n\n  this._persist(store);\n  return val;\n};\n\n/**\n * Delete a key from the store and schedule a save.\n * @param  {String} key  The key under which the value is stored.\n * @return {null}\n */\n\nStorage.prototype.delete = function (key) {\n  var store = this._store();\n  delete store[key];\n  this._persist(store);\n};\n\n/**\n * Setup the store with defaults value and schedule a save.\n * If keys already exist, the initial value is kept.\n * @param  {Object} defaults  Key-value object to store.\n * @return {*} val  Returns the merged options.\n */\n\nStorage.prototype.defaults = function (defaults) {\n  assert(_.isObject(defaults), 'Storage `defaults` method only accept objects');\n  var val = _.defaults(this.getAll(), defaults);\n  this.set(val);\n  return val;\n};\n","/home/travis/build/npmtest/node-npmtest-yeoman-generator/node_modules/yeoman-generator/lib/util/prompt-suggestion.js":"'use strict';\nvar assert = require('assert');\nvar _ = require('lodash');\n\n/**\n * @mixin\n * @alias util/prompt-suggestion\n */\nvar promptSuggestion = module.exports;\n\n/**\n * Returns the default value for a checkbox.\n *\n * @param  {Object} question Inquirer prompt item\n * @param  {*} defaultValue  The stored default value\n * @return {*}               Default value to set\n * @private\n */\nvar getCheckboxDefault = function (question, defaultValue) {\n  // For simplicity we uncheck all boxes and\n  // use .default to set the active ones.\n  _.each(question.choices, function (choice) {\n    if (typeof choice === 'object') {\n      choice.checked = false;\n    }\n  });\n\n  return defaultValue;\n};\n\n/**\n * Returns the default value for a list.\n *\n * @param  {Object} question    Inquirer prompt item\n * @param  {*} defaultValue     The stored default value\n * @return {*}                  Default value to set\n * @private\n */\nvar getListDefault = function (question, defaultValue) {\n  var choiceValues = _.map(question.choices, function (choice) {\n    if (typeof choice === 'object') {\n      return choice.value;\n    }\n    return choice;\n  });\n\n  return choiceValues.indexOf(defaultValue);\n};\n\n/**\n * Return true if the answer should be store in\n * the global store, otherwise false.\n *\n * @param  {Object}       question Inquirer prompt item\n * @param  {String|Array} answer   The inquirer answer\n * @param  {Boolean}      storeAll Should store default values\n * @return {Boolean}               Answer to be stored\n * @private\n */\nvar storeListAnswer = function (question, answer, storeAll) {\n  var choiceValues = _.map(question.choices, function (choice) {\n    if (Object.prototype.hasOwnProperty.call(choice, 'value')) {\n      return choice.value;\n    }\n    return choice;\n  });\n  var choiceIndex = choiceValues.indexOf(answer);\n\n  // Check if answer is not equal to default value\n  if (storeAll || question.default !== choiceIndex) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Return true if the answer should be store in\n * the global store, otherwise false.\n *\n * @param  {Object}       question Inquirer prompt item\n * @param  {String|Array} answer   The inquirer answer\n * @param  {Boolean}      storeAll Should store default values\n * @return {Boolean}               Answer to be stored\n * @private\n */\nvar storeAnswer = function (question, answer, storeAll) {\n  // Check if answer is not equal to default value or is undefined\n  if (answer !== undefined && (storeAll || question.default !== answer)) {\n    return true;\n  }\n\n  return false;\n};\n\n/**\n * Prefill the defaults with values from the global store.\n *\n * @param  {Store}        store     `.yo-rc-global` global config\n * @param  {Array|Object} questions Original prompt questions\n * @return {Array}                  Prompt questions array with prefilled values.\n */\npromptSuggestion.prefillQuestions = function (store, questions) {\n  assert(store, 'A store parameter is required');\n  assert(questions, 'A questions parameter is required');\n\n  var promptValues = store.get('promptValues') || {};\n\n  if (!Array.isArray(questions)) {\n    questions = [questions];\n  }\n\n  questions = questions.map(_.clone);\n\n  // Write user defaults back to prompt\n  return questions.map(function (question) {\n    if (question.store !== true) {\n      return question;\n    }\n\n    var storedValue = promptValues[question.name];\n\n    if (storedValue === undefined) {\n      return question;\n    }\n\n    // Override prompt default with the user's default\n    switch (question.type) {\n      case 'rawlist':\n      case 'expand':\n        question.default = getListDefault(question, storedValue);\n        break;\n      case 'checkbox':\n        question.default = getCheckboxDefault(question, storedValue);\n        break;\n      default:\n        question.default = storedValue;\n        break;\n    }\n\n    return question;\n  });\n};\n\n/**\n * Store the answers in the global store.\n *\n * @param  {Store}        store     `.yo-rc-global` global config\n * @param  {Array|Object} questions Original prompt questions\n * @param  {Object}       answers   The inquirer answers\n * @param  {Boolean}      storeAll  Should store default values\n */\npromptSuggestion.storeAnswers = function (store, questions, answers, storeAll) {\n  assert(store, 'A store parameter is required');\n  assert(answers, 'A answers parameter is required');\n  assert(questions, 'A questions parameter is required');\n  assert.ok(_.isObject(answers), 'answers must be a object');\n\n  storeAll = storeAll || false;\n  var promptValues = store.get('promptValues') || {};\n\n  if (!Array.isArray(questions)) {\n    questions = [questions];\n  }\n\n  _.each(questions, function (question) {\n    if (question.store !== true) {\n      return;\n    }\n\n    var saveAnswer;\n    var key = question.name;\n    var answer = answers[key];\n\n    switch (question.type) {\n      case 'rawlist':\n      case 'expand':\n        saveAnswer = storeListAnswer(question, answer, storeAll);\n        break;\n\n      default:\n        saveAnswer = storeAnswer(question, answer, storeAll);\n        break;\n    }\n\n    if (saveAnswer) {\n      promptValues[key] = answer;\n    }\n  });\n\n  if (Object.keys(promptValues).length) {\n    store.set('promptValues', promptValues);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-yeoman-generator/node_modules/yeoman-generator/lib/actions/install.js":"'use strict';\nvar assert = require('assert');\nvar _ = require('lodash');\nvar dargs = require('dargs');\nvar async = require('async');\nvar chalk = require('chalk');\n\n/**\n * @mixin\n * @alias actions/install\n */\nvar install = module.exports;\n\n/**\n * Combine package manager cmd line arguments and run the `install` command.\n *\n * During the `install` step, every command will be scheduled to run once, on the\n * run loop. (So don't combine the callback with `this.async()`)\n *\n * @param {String} installer Which package manager to use\n * @param {String|Array} [paths] Packages to install. Use an empty string for `npm install`\n * @param {Object} [options] Options to pass to `dargs` as arguments\n * @param {Function} [cb]\n * @param {Object} [spawnOptions] Options to pass `child_process.spawn`. ref\n *                                https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options\n */\n\ninstall.runInstall = function (installer, paths, options, cb, spawnOptions) {\n  if (!cb && _.isFunction(options)) {\n    cb = options;\n    options = {};\n  }\n\n  options = options || {};\n  spawnOptions = spawnOptions || {};\n  cb = cb || function () {};\n  paths = Array.isArray(paths) ? paths : (paths && paths.split(' ')) || [];\n\n  var args = ['install'].concat(paths).concat(dargs(options));\n\n  // Yarn uses the `add` command to specifically add a package to a project.\n  if (installer === 'yarn' && paths.length > 0) {\n    args[0] = 'add';\n  }\n\n  // Only for npm, use a minimum cache of one day\n  if (installer === 'npm') {\n    args = args.concat(['--cache-min', 24 * 60 * 60]);\n  }\n\n  // Return early if we're skipping installation.\n  if (this.options.skipInstall) {\n    cb();\n    return this;\n  }\n\n  this.env.runLoop.add('install', function (done) {\n    this.emit(installer + 'Install', paths);\n    this.spawnCommand(installer, args, spawnOptions)\n      .on('error', function (err) {\n        console.log(chalk.red('Could not finish installation. \\n') +\n          'Please install ' + installer + ' with ' +\n          chalk.yellow('npm install -g ' + installer) + ' and try again.'\n        );\n        cb(err);\n      })\n      .on('exit', function (err) {\n        this.emit(installer + 'Install:end', paths);\n        cb(err);\n        done();\n      }.bind(this));\n  }.bind(this), {once: installer + ' ' + args.join(' '), run: false});\n\n  return this;\n};\n\n/**\n * Runs `npm` and `bower`, in sequence, in the generated directory and prints a\n * message to let the user know.\n *\n * @example\n * this.installDependencies({\n *   bower: true,\n *   npm: true,\n *   callback: function () {\n *     console.log('Everything is ready!');\n *   }\n * });\n *\n * @param {Object} [options]\n * @param {Boolean} [options.npm=true] - whether to run `npm install`\n * @param {Boolean} [options.bower=true] - whether to run `bower install`\n * @param {Boolean} [options.yarn=false] - whether to run `yarn install`\n * @param {Boolean} [options.skipMessage=false] - whether to log the used commands\n * @param {Function} [options.callback] - call once all commands have run\n */\n\ninstall.installDependencies = function (options) {\n  options = options || {};\n  var commands = [];\n  var msg = {\n    commands: [],\n    template: _.template('\\n\\nI\\'m all done. ' +\n    '<%= skipInstall ? \"Just run\" : \"Running\" %> <%= commands %> ' +\n    '<%= skipInstall ? \"\" : \"for you \" %>to install the required dependencies.' +\n    '<% if (!skipInstall) { %> If this fails, try running the command yourself.<% } %>\\n\\n')\n  };\n\n  if (_.isFunction(options)) {\n    options = {\n      callback: options\n    };\n  }\n\n  if (options.npm !== false) {\n    msg.commands.push('npm install');\n    commands.push(function (cb) {\n      this.npmInstall(null, null, cb);\n    }.bind(this));\n  }\n\n  if (options.yarn === true) {\n    msg.commands.push('yarn install');\n    commands.push(function (cb) {\n      this.yarnInstall(null, null, cb);\n    }.bind(this));\n  }\n\n  if (options.bower !== false) {\n    msg.commands.push('bower install');\n    commands.push(function (cb) {\n      this.bowerInstall(null, null, cb);\n    }.bind(this));\n  }\n\n  assert(msg.commands.length, 'installDependencies needs at least one of `npm`, `bower` or `yarn` to run.');\n\n  if (!options.skipMessage) {\n    var tplValues = _.extend({\n      skipInstall: false\n    }, this.options, {\n      commands: chalk.yellow.bold(msg.commands.join(' && '))\n    });\n    this.log(msg.template(tplValues));\n  }\n\n  async.parallel(commands, options.callback || _.noop);\n};\n\n/**\n * Receives a list of `components` and an `options` object to install through bower.\n *\n * The installation will automatically run during the run loop `install` phase.\n *\n * @param {String|Array} [cmpnt] Components to install\n * @param {Object} [options] Options to pass to `dargs` as arguments\n * @param {Function} [cb]\n * @param {Object} [spawnOptions] Options to pass `child_process.spawn`.\n */\n\ninstall.bowerInstall = function (cmpnt, options, cb, spawnOptions) {\n  return this.runInstall('bower', cmpnt, options, cb, spawnOptions);\n};\n\n/**\n * Receives a list of `packages` and an `options` object to install through npm.\n *\n * The installation will automatically run during the run loop `install` phase.\n *\n * @param {String|Array} [pkgs] Packages to install\n * @param {Object} [options] Options to pass to `dargs` as arguments\n * @param {Function} [cb]\n * @param {Object} [spawnOptions] Options to pass `child_process.spawn`.\n */\n\ninstall.npmInstall = function (pkgs, options, cb, spawnOptions) {\n  return this.runInstall('npm', pkgs, options, cb, spawnOptions);\n};\n/**\n * Receives a list of `packages` and an `options` object to install through npm.\n *\n * The installation will automatically run during the run loop `install` phase.\n *\n * @param {String|Array} [pkgs] Packages to install\n * @param {Object} [options] Options to pass to `dargs` as arguments\n * @param {Function} [cb]\n * @param {Object} [spawnOptions] Options to pass `child_process.spawn`.\n */\n\ninstall.yarnInstall = function (pkgs, options, cb, spawnOptions) {\n  return this.runInstall('yarn', pkgs, options, cb, spawnOptions);\n};\n","/home/travis/build/npmtest/node-npmtest-yeoman-generator/node_modules/yeoman-generator/lib/actions/help.js":"'use strict';\nvar path = require('path');\nvar fs = require('fs');\nvar _ = require('lodash');\nvar table = require('text-table');\nvar pathExists = require('path-exists');\n\n/**\n * @mixin\n * @alias actions/help\n */\nvar help = module.exports;\n\n/**\n * Tries to get the description from a USAGE file one folder above the\n * source root otherwise uses a default description.\n */\n\nhelp.help = function () {\n  var filepath = path.join(this.sourceRoot(), '../USAGE');\n  var exists = pathExists.sync(filepath);\n  var out = [\n    'Usage:',\n    '  ' + this.usage(),\n    ''\n  ];\n\n  // Build options\n  if (Object.keys(this._options).length > 0) {\n    out = out.concat([\n      'Options:',\n      this.optionsHelp(),\n      ''\n    ]);\n  }\n\n  // Build arguments\n  if (this._arguments.length > 0) {\n    out = out.concat([\n      'Arguments:',\n      this.argumentsHelp(),\n      ''\n    ]);\n  }\n\n  // Append USAGE file is any\n  if (exists) {\n    out.push(fs.readFileSync(filepath, 'utf8'));\n  }\n\n  return out.join('\\n');\n};\n\nfunction formatArg(config) {\n  var arg = '<' + config.name + '>';\n\n  if (!config.required) {\n    arg = '[' + arg + ']';\n  }\n\n  return arg;\n}\n\n/**\n * Output usage information for this given generator, depending on its arguments\n * or options.\n */\n\nhelp.usage = function () {\n  var options = Object.keys(this._options).length ? '[options]' : '';\n  var name = ' ' + this.options.namespace;\n  var args = '';\n\n  if (this._arguments.length > 0) {\n    args = this._arguments.map(formatArg).join(' ');\n  }\n\n  name = name.replace(/^yeoman:/, '');\n  var out = 'yo' + name + ' ' + options + ' ' + args;\n\n  if (this.description) {\n    out += '\\n\\n' + this.description;\n  }\n\n  return out;\n};\n\n/**\n * Simple setter for custom `description` to append on help output.\n *\n * @param {String} description\n */\n\nhelp.desc = function (description) {\n  this.description = description || '';\n  return this;\n};\n\n/**\n * Get help text for arguments\n * @returns {String} Text of options in formatted table\n */\nhelp.argumentsHelp = function () {\n  var rows = this._arguments.map(function (config) {\n    return [\n      '',\n      config.name ? config.name : '',\n      config.description ? '# ' + config.description : '',\n      config.type ? 'Type: ' + config.type.name : '',\n      'Required: ' + config.required\n    ];\n  });\n\n  return table(rows);\n};\n\n/**\n * Get help text for options\n * @returns {String} Text of options in formatted table\n */\nhelp.optionsHelp = function () {\n  var options = _.reject(this._options, function (el) {\n    return el.hide;\n  });\n\n  var rows = options.map(function (opt) {\n    return [\n      '',\n      opt.alias ? '-' + opt.alias + ', ' : '',\n      '--' + opt.name,\n      opt.description ? '# ' + opt.description : '',\n      (opt.default !== undefined && opt.default !== null && opt.default !== '') ? 'Default: ' + opt.default : ''\n    ];\n  });\n\n  return table(rows);\n};\n","/home/travis/build/npmtest/node-npmtest-yeoman-generator/node_modules/yeoman-generator/lib/actions/spawn-command.js":"'use strict';\nvar _ = require('lodash');\nvar spawn = require('cross-spawn');\n\n/**\n * @mixin\n * @alias actions/spawn-command\n */\nvar spawnCommand = module.exports;\n\n/**\n * Normalize a command across OS and spawn it (asynchronously).\n *\n * @param {String} command\n * @param {Array} args\n * @param {object} [opt]\n */\nspawnCommand.spawnCommand = function (command, args, opt) {\n  opt = opt || {};\n  return spawn(command, args, _.defaults(opt, {stdio: 'inherit'}));\n};\n\n/**\n * Normalize a command across OS and spawn it (synchronously).\n *\n * @param {String} command\n * @param {Array} args\n * @param {object} [opt]\n */\nspawnCommand.spawnCommandSync = function (command, args, opt) {\n  opt = opt || {};\n  return spawn.sync(command, args, _.defaults(opt, {stdio: 'inherit'}));\n};\n","/home/travis/build/npmtest/node-npmtest-yeoman-generator/node_modules/yeoman-generator/lib/actions/user.js":"'use strict';\nvar shell = require('shelljs');\nvar githubUsername = require('github-username');\n\nvar nameCache = {};\nvar emailCache = {};\n\n/**\n * @mixin\n * @alias actions/user\n */\nvar user = module.exports;\n\nuser.git = {};\nuser.github = {};\n\n/**\n * Retrieves user's name from Git in the global scope or the project scope\n * (it'll take what Git will use in the current context)\n */\n\nuser.git.name = function () {\n  var name = nameCache[process.cwd()];\n\n  if (name) {\n    return name;\n  }\n\n  if (shell.which('git')) {\n    name = shell.exec('git config --get user.name', {silent: true}).stdout.trim();\n    nameCache[process.cwd()] = name;\n  }\n\n  return name;\n};\n\n/**\n * Retrieves user's email from Git in the global scope or the project scope\n * (it'll take what Git will use in the current context)\n */\n\nuser.git.email = function () {\n  var email = emailCache[process.cwd()];\n\n  if (email) {\n    return email;\n  }\n\n  if (shell.which('git')) {\n    email = shell.exec('git config --get user.email', {silent: true}).stdout.trim();\n    emailCache[process.cwd()] = email;\n  }\n\n  return email;\n};\n\n/**\n * Retrieves GitHub's username from the GitHub API.\n */\n\nuser.github.username = function (cb) {\n  var promise = githubUsername(user.git.email());\n\n  if (cb) {\n    promise.then(\n      val => cb(null, val),\n      err => cb(err)\n    );\n  }\n\n  return promise;\n};\n"}